<?xml version="1.0" encoding="UTF-8"?>
<!--
//============================================================================
//   The confidential and proprietary information contained in this file may
//   only be used by a person authorised under and to the extent permitted
//   by a subsisting licensing agreement from Arm Limited or its affiliates.
//
//          (C) COPYRIGHT 2022-2023 Arm Limited or its affiliates.
//              ALL RIGHTS RESERVED
//
//   This entire notice must be reproduced on all copies of this file
//   and copies of this file may only be made by a person if such person is
//   permitted to do so under the terms of a subsisting license agreement
//   from Arm Limited or its affiliates.
//============================================================================
-->
<spirit:abstractionDefinition xmlns:arm="http://www.arm.com/SPIRIT/1685-2009" xmlns:spirit="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009 http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009/index.xsd ">
  <spirit:vendor>amba.com</spirit:vendor>
  <spirit:library>AMBA5</spirit:library>
  <spirit:name>ACE5-LiteACP_rtl</spirit:name>
  <spirit:version>r0p2_0</spirit:version>
  <spirit:busType spirit:library="AMBA5" spirit:name="ACE5-LiteACP" spirit:vendor="amba.com" spirit:version="r0p2_0"/>
  <spirit:extends spirit:library="AMBA5" spirit:name="AXI5_rtl" spirit:vendor="amba.com" spirit:version="r0p2_0"/>
  <spirit:ports>
    <spirit:port>
      <spirit:logicalName>ACLK</spirit:logicalName>
      <spirit:description>Synchronous signals are sampled on the rising edge of the global clock.</spirit:description>
      <spirit:wire>
        <spirit:qualifier>
          <spirit:isClock>true</spirit:isClock>
        </spirit:qualifier>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
        <spirit:requiresDriver spirit:driverType="clock">true</spirit:requiresDriver>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ACLKEN</spirit:logicalName>
      <spirit:description>Clock enable signal. Used as a qualifier for the ACLK signal. This signal indicates which rising edges of ACLK should be acted upon: 1 = valid rising edge of ACLK, 0 = any rising edge of ACLK should be ignored.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
        <spirit:defaultValue>1</spirit:defaultValue>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:isClockEnable>true</arm:isClockEnable>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ACLKENCHK</spirit:logicalName>
      <spirit:description>Check signal for ACLKEN.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
        <spirit:defaultValue>0</spirit:defaultValue>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:checkPortReferences>
          <arm:checkPortReference>ACLKEN</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARESETn</spirit:logicalName>
      <spirit:description>Active-LOW global reset signal.</spirit:description>
      <spirit:wire>
        <spirit:qualifier>
          <spirit:isReset>true</spirit:isReset>
        </spirit:qualifier>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
        <spirit:requiresDriver spirit:driverType="singleShot">true</spirit:requiresDriver>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWVALID</spirit:logicalName>
      <spirit:description>Asserted high to indicate that the signals on the AW channel are valid.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_request</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWREADY</spirit:logicalName>
      <spirit:description>Asserted high to indicate that a transfer on the AW channel can be accepted.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_request</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWID</spirit:logicalName>
      <spirit:description>Transaction identifier used for the ordering of write requests and responses.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
        <spirit:defaultValue>0</spirit:defaultValue>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:channelRef>Write_request</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWADDR</spirit:logicalName>
      <spirit:description>Address of first transfer in a transaction.</spirit:description>
      <spirit:wire>
        <spirit:qualifier>
          <spirit:isAddress>true</spirit:isAddress>
        </spirit:qualifier>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_request</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWREGION</spirit:logicalName>
      <spirit:description>A 4-bit region identifier which can be used to identify different address regions.</spirit:description>
      <spirit:wire>
        <spirit:qualifier>
          <spirit:isAddress>true</spirit:isAddress>
        </spirit:qualifier>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWLEN</spirit:logicalName>
      <spirit:description>The total number of transfers in a transaction, encoded as: Length = AxLEN + 1.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>8</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:width>8</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
        <spirit:defaultValue>0</spirit:defaultValue>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:channelRef>Write_request</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWSIZE</spirit:logicalName>
      <spirit:description>Indicates the maximum number of bytes in each data transfer within a transaction.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWBURST</spirit:logicalName>
      <spirit:description>Describes how the address increments between transfers in a transaction.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWLOCK</spirit:logicalName>
      <spirit:description>Asserted high to indicate that an exclusive access is required.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWCACHE</spirit:logicalName>
      <spirit:description>The memory attributes of a request control how a transaction progresses through the system and how caches and buffers handle the request.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>4</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>4</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
        <spirit:defaultValue>0</spirit:defaultValue>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:channelRef>Write_request</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWPROT</spirit:logicalName>
      <spirit:description>The Access attributes for a request which can be used to protect memory against unexpected transactions.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:width>3</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>3</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_request</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWNSE</spirit:logicalName>
      <spirit:description>Extends the physical address spaces that can be addressed to include Root and Realm.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWQOS</spirit:logicalName>
      <spirit:description>Quality of Service identifier used to distinguish between different traffic streams.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWUSER</spirit:logicalName>
      <spirit:description>User-defined extension to a request.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
        <spirit:defaultValue>0</spirit:defaultValue>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:channelRef>Write_request</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWDOMAIN</spirit:logicalName>
      <spirit:description>Shareability domain of a request.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:width>2</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:width>2</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_request</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWSNOOP</spirit:logicalName>
      <spirit:description>Opcode for requests using the write channels.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
        <spirit:defaultValue>0</spirit:defaultValue>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:channelRef>Write_request</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWSTASHNID</spirit:logicalName>
      <spirit:description>Node Identifier of the target for a stash operation.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>11</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>11</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
        <spirit:defaultValue>0</spirit:defaultValue>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:channelRef>Write_request</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWSTASHNIDEN</spirit:logicalName>
      <spirit:description>HIGH to indicate that the AWSTASHNID signal is valid.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
        <spirit:defaultValue>0</spirit:defaultValue>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:channelRef>Write_request</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWSTASHLPID</spirit:logicalName>
      <spirit:description>Logical Processor Identifier within the target for a stash operation.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>5</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>5</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
        <spirit:defaultValue>0</spirit:defaultValue>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:channelRef>Write_request</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWSTASHLPIDEN</spirit:logicalName>
      <spirit:description>HIGH to indicate that the AWSTASHLPID signal is valid.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
        <spirit:defaultValue>0</spirit:defaultValue>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:channelRef>Write_request</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWTRACE</spirit:logicalName>
      <spirit:description>Trace signal associated with the write request channel.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_request</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWLOOP</spirit:logicalName>
      <spirit:description>A user-defined value that must be reflected from a write request to response transfers.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWMMUVALID</spirit:logicalName>
      <spirit:description>MMU qualifier signal. When deasserted, the transaction address is a physical address and does not require translation.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWMMUSECSID</spirit:logicalName>
      <spirit:description>Secure Stream Identifier for untranslated transactions.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWMMUSID</spirit:logicalName>
      <spirit:description>Stream Identifier for untranslated transactions.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWMMUSSIDV</spirit:logicalName>
      <spirit:description>Asserted HIGH to indicate that a transaction has a valid substream identifier.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWMMUSSID</spirit:logicalName>
      <spirit:description>Substream identifier for untranslated transactions.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWMMUATST</spirit:logicalName>
      <spirit:description>Indicates that the transaction has already undergone PCIe ATS translation.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWMMUFLOW</spirit:logicalName>
      <spirit:description>Indicates the SMMU flow for managing translation faults for this transaction.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWPBHA</spirit:logicalName>
      <spirit:description>A 4b user-defined descriptor associated with a translation table entry that can be annotated onto a transaction request.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWNSAID</spirit:logicalName>
      <spirit:description>Non-secure access identifier, can be checked to permit or deny access to a memory location.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWSUBSYSID</spirit:logicalName>
      <spirit:description>Subsystem identifier that indicates from which subsystem a request originates.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWATOP</spirit:logicalName>
      <spirit:description>Indicates the type and endianness of an atomic transaction.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWMPAM</spirit:logicalName>
      <spirit:description>Memory System Resource Partitioning and Monitoring (MPAM) information for a request.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_request</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWIDUNQ</spirit:logicalName>
      <spirit:description>If asserted high, the ID for this transfer is unique-in-flight.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
        <spirit:defaultValue>0</spirit:defaultValue>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:channelRef>Write_request</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWCMO</spirit:logicalName>
      <spirit:description>Indicates the CMO type for write opcodes that include a cache maintenance operation.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWTAGOP</spirit:logicalName>
      <spirit:description>Indicates if MTE tags are associated with a write transaction.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWMECID</spirit:logicalName>
      <spirit:description>RME Memory Encryption Context identifier.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWVALIDCHK</spirit:logicalName>
      <spirit:description>Check signal for AWVALID.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_request</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>AWVALID</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWREADYCHK</spirit:logicalName>
      <spirit:description>Check signal for AWREADY.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_request</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>AWREADY</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWIDCHK</spirit:logicalName>
      <spirit:description>Check signal for AWID, AWIDUNQ.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_request</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>AWID</arm:checkPortReference>
          <arm:checkPortReference>AWIDUNQ</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWADDRCHK</spirit:logicalName>
      <spirit:description>Check signal for AWADDR.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_request</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>AWADDR</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWLENCHK</spirit:logicalName>
      <spirit:description>Check signal for AWLEN.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_request</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>AWLEN</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWCTLCHK0</spirit:logicalName>
      <spirit:description>Check signal for AWSIZE, AWBURST, AWLOCK, AWPROT, AWNSE.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_request</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>AWSIZE</arm:checkPortReference>
          <arm:checkPortReference>AWBURST</arm:checkPortReference>
          <arm:checkPortReference>AWLOCK</arm:checkPortReference>
          <arm:checkPortReference>AWPROT</arm:checkPortReference>
          <arm:checkPortReference>AWNSE</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWCTLCHK1</spirit:logicalName>
      <spirit:description>Check signal for AWREGION, AWCACHE, AWQOS.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_request</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>AWREGION</arm:checkPortReference>
          <arm:checkPortReference>AWCACHE</arm:checkPortReference>
          <arm:checkPortReference>AWQOS</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWCTLCHK2</spirit:logicalName>
      <spirit:description>Check signal for AWDOMAIN, AWSNOOP.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_request</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>AWDOMAIN</arm:checkPortReference>
          <arm:checkPortReference>AWSNOOP</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWCTLCHK3</spirit:logicalName>
      <spirit:description>Check signal for AWATOP, AWCMO, AWTAGOP.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWUSERCHK</spirit:logicalName>
      <spirit:description>Check signal for AWUSER.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_request</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>AWUSER</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWSTASHNIDCHK</spirit:logicalName>
      <spirit:description>Check signal for AWSTASHNID, AWSTASHNIDEN.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_request</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>AWSTASHNID</arm:checkPortReference>
          <arm:checkPortReference>AWSTASHNIDEN</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWSTASHLPIDCHK</spirit:logicalName>
      <spirit:description>Check signal for AWSTASHLPID, AWSTASHLPIDEN.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_request</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>AWSTASHLPID</arm:checkPortReference>
          <arm:checkPortReference>AWSTASHLPIDEN</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWTRACECHK</spirit:logicalName>
      <spirit:description>Check signal for AWTRACE.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_request</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>AWTRACE</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWLOOPCHK</spirit:logicalName>
      <spirit:description>Check signal for AWLOOP.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWMMUCHK</spirit:logicalName>
      <spirit:description>Check signal for AWMMUATST, AWMMUFLOW, AWMMUSECSID, AWMMUSSIDV, AWMMUVALID.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWMMUSIDCHK</spirit:logicalName>
      <spirit:description>Check signal for AWMMUSID.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_request</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>AWMMUSID</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWMMUSSIDCHK</spirit:logicalName>
      <spirit:description>Check signal for AWMMUSSID.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWPBHACHK</spirit:logicalName>
      <spirit:description>Check signal for AWPBHA.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWNSAIDCHK</spirit:logicalName>
      <spirit:description>Check signal for AWNSAID.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWMPAMCHK</spirit:logicalName>
      <spirit:description>Check signal for AWMPAM.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_request</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>AWMPAM</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWSUBSYSIDCHK</spirit:logicalName>
      <spirit:description>Check signal for AWSUBSYSID.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWMECIDCHK</spirit:logicalName>
      <spirit:description>Check signal for AWMECID.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_request</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>AWMECID</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>WVALID</spirit:logicalName>
      <spirit:description>Asserted high to indicate that the signals on the W channel are valid.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_data</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>WREADY</spirit:logicalName>
      <spirit:description>Asserted high to indicate that a transfer on the W channel can be accepted.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_data</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>WDATA</spirit:logicalName>
      <spirit:description>The write data signal carries data between a Manager and Subordinate in a write transaction.</spirit:description>
      <spirit:wire>
        <spirit:qualifier>
          <spirit:isData>true</spirit:isData>
        </spirit:qualifier>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_data</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>WSTRB</spirit:logicalName>
      <spirit:description>Indicates which byte lanes of WDATA contain valid data in a write transaction.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
        <spirit:defaultValue>0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</spirit:defaultValue>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:channelRef>Write_data</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>WTAG</spirit:logicalName>
      <spirit:description>Memory tag associated with data. There is a 4-bit tag per 128-bits of data, with a minimum of 4-bits. Has the same validity rules as the associated data. It is recommended that invalid tags are driven to zero.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>WTAGUPDATE</spirit:logicalName>
      <spirit:description>Indicates which tags must be written to memory when AWTAGOP is Update. There is 1 bit per 4 bits of tag.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>WLAST</spirit:logicalName>
      <spirit:description>Indicates the last write data transfer of a transaction.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_data</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>WUSER</spirit:logicalName>
      <spirit:description>User-defined extension to write data.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
        <spirit:defaultValue>0</spirit:defaultValue>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:channelRef>Write_data</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>WPOISON</spirit:logicalName>
      <spirit:description>Asserted high to indicates that the data in this transfer is corrupted. There is one bit per 64-bits of data.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_data</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>WTRACE</spirit:logicalName>
      <spirit:description>Trace signal associated with the write data channel.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_data</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>WVALIDCHK</spirit:logicalName>
      <spirit:description>Check signal for WVALID.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_data</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>WVALID</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>WREADYCHK</spirit:logicalName>
      <spirit:description>Check signal for WREADY.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_data</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>WREADY</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>WDATACHK</spirit:logicalName>
      <spirit:description>Check signal for WDATA.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_data</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>WDATA</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>WSTRBCHK</spirit:logicalName>
      <spirit:description>Check signal for WSTRB.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_data</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>WSTRB</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>WTAGCHK</spirit:logicalName>
      <spirit:description>Check signal for WTAG, WTAGUPDATE.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>WLASTCHK</spirit:logicalName>
      <spirit:description>Check signal for WLAST.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_data</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>WLAST</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>WUSERCHK</spirit:logicalName>
      <spirit:description>Check signal for WUSER.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_data</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>WUSER</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>WPOISONCHK</spirit:logicalName>
      <spirit:description>Check signal for WPOISON.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_data</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>WPOISON</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>WTRACECHK</spirit:logicalName>
      <spirit:description>Check signal for WTRACE.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_data</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>WTRACE</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>BVALID</spirit:logicalName>
      <spirit:description>Asserted high to indicate that the signals on the B channel are valid.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_response</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>BREADY</spirit:logicalName>
      <spirit:description>Asserted high to indicate that a transfer on the B channel can be accepted.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_response</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>BID</spirit:logicalName>
      <spirit:description>Transaction identifier used for the ordering of write requests and responses.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
        <spirit:defaultValue>0</spirit:defaultValue>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:channelRef>Write_response</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>BIDUNQ</spirit:logicalName>
      <spirit:description>If asserted high, the ID for this transfer is unique-in-flight.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
        <spirit:defaultValue>0</spirit:defaultValue>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:channelRef>Write_response</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>BRESP</spirit:logicalName>
      <spirit:description>Indicates the result of a transaction that uses the write channels.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
        <spirit:defaultValue>0</spirit:defaultValue>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:channelRef>Write_response</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>BCOMP</spirit:logicalName>
      <spirit:description>Asserted HIGH to indicate a Completion response.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>BPERSIST</spirit:logicalName>
      <spirit:description>Asserted HIGH to indicate a Persist response.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>BTAGMATCH</spirit:logicalName>
      <spirit:description>Indicates the result of a tag comparison on a write transaction.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>BUSER</spirit:logicalName>
      <spirit:description>User-defined extension to a write response.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
        <spirit:defaultValue>0</spirit:defaultValue>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:channelRef>Write_response</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>BTRACE</spirit:logicalName>
      <spirit:description>Trace signal associated with the write response channel.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_response</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>BLOOP</spirit:logicalName>
      <spirit:description>A user-defined value that must be reflected from a write request to response transfers.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>BBUSY</spirit:logicalName>
      <spirit:description>Indicates the current level of Subordinate activity in a transaction response. The value increases as the Subordinate becomes busier.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>BVALIDCHK</spirit:logicalName>
      <spirit:description>Check signal for BVALID.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_response</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>BVALID</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>BREADYCHK</spirit:logicalName>
      <spirit:description>Check signal for BREADY.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_response</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>BREADY</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>BIDCHK</spirit:logicalName>
      <spirit:description>Check signal for BID, BIDUNQ.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_response</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>BID</arm:checkPortReference>
          <arm:checkPortReference>BIDUNQ</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>BRESPCHK</spirit:logicalName>
      <spirit:description>Check signal for BRESP, BCOMP, BPERSIST, BTAGMATCH, BBUSY.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_response</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>BRESP</arm:checkPortReference>
          <arm:checkPortReference>BCOMP</arm:checkPortReference>
          <arm:checkPortReference>BPERSIST</arm:checkPortReference>
          <arm:checkPortReference>BTAGMATCH</arm:checkPortReference>
          <arm:checkPortReference>BBUSY</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>BUSERCHK</spirit:logicalName>
      <spirit:description>Check signal for BUSER.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_response</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>BUSER</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>BTRACECHK</spirit:logicalName>
      <spirit:description>Check signal for BTRACE.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Write_response</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>BTRACE</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>BLOOPCHK</spirit:logicalName>
      <spirit:description>Check signal for BLOOP.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARVALID</spirit:logicalName>
      <spirit:description>Asserted high to indicate that the signals on the AR channel are valid.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_request</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARREADY</spirit:logicalName>
      <spirit:description>Asserted high to indicate that a transfer on the AR channel can be accepted.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_request</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARID</spirit:logicalName>
      <spirit:description>Transaction identifier used for the ordering of read requests, responses, and data.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
        <spirit:defaultValue>0</spirit:defaultValue>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:channelRef>Read_request</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARADDR</spirit:logicalName>
      <spirit:description>Address of first transfer in a transaction.</spirit:description>
      <spirit:wire>
        <spirit:qualifier>
          <spirit:isAddress>true</spirit:isAddress>
        </spirit:qualifier>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_request</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARREGION</spirit:logicalName>
      <spirit:description>A 4-bit region identifier which can be used to identify different address regions.</spirit:description>
      <spirit:wire>
        <spirit:qualifier>
          <spirit:isAddress>true</spirit:isAddress>
        </spirit:qualifier>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARLEN</spirit:logicalName>
      <spirit:description>The total number of transfers in a transaction, encoded as: Length = AxLEN + 1.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>8</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:width>8</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
        <spirit:defaultValue>0</spirit:defaultValue>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:channelRef>Read_request</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARSIZE</spirit:logicalName>
      <spirit:description>Indicates the maximum number of bytes in each data transfer within a transaction.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARBURST</spirit:logicalName>
      <spirit:description>Describes how the address increments between transfers in a transaction.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARLOCK</spirit:logicalName>
      <spirit:description>Asserted high to indicate that an exclusive access is required.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARCACHE</spirit:logicalName>
      <spirit:description>The memory attributes of a request control how a transaction progresses through the system and how caches and buffers handle the request.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>4</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>4</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
        <spirit:defaultValue>0</spirit:defaultValue>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:channelRef>Read_request</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARPROT</spirit:logicalName>
      <spirit:description>The Access attributes for a request which can be used to protect memory against unexpected transactions.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:width>3</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>3</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_request</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARNSE</spirit:logicalName>
      <spirit:description>Extends the physical address spaces that can be addressed to include Root and Realm.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARQOS</spirit:logicalName>
      <spirit:description>Quality of Service identifier used to distinguish between different traffic streams.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARUSER</spirit:logicalName>
      <spirit:description>User-defined extension to a request.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
        <spirit:defaultValue>0</spirit:defaultValue>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:channelRef>Read_request</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARDOMAIN</spirit:logicalName>
      <spirit:description>Shareability domain of a request.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:width>2</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:width>2</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_request</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARSNOOP</spirit:logicalName>
      <spirit:description>Opcode for requests using the read channels.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
        <spirit:defaultValue>0</spirit:defaultValue>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:channelRef>Read_request</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARTRACE</spirit:logicalName>
      <spirit:description>Trace signal associated with the read request channel.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_request</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARLOOP</spirit:logicalName>
      <spirit:description>A user-defined value that must be reflected from a read request to response and data transfers.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARMMUVALID</spirit:logicalName>
      <spirit:description>MMU qualifier signal. When deasserted, the transaction address is a physical address and does not require translation.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARMMUSECSID</spirit:logicalName>
      <spirit:description>Secure Stream Identifier for untranslated transactions.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARMMUSID</spirit:logicalName>
      <spirit:description>Stream Identifier for untranslated transactions.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARMMUSSIDV</spirit:logicalName>
      <spirit:description>Asserted HIGH to indicate that a transaction has a valid substream identifier.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARMMUSSID</spirit:logicalName>
      <spirit:description>Substream identifier for untranslated transactions.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARMMUATST</spirit:logicalName>
      <spirit:description>Indicates that the transaction has already undergone PCIe ATS translation.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARMMUFLOW</spirit:logicalName>
      <spirit:description>Indicates the SMMU flow for managing translation faults for this transaction.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARPBHA</spirit:logicalName>
      <spirit:description>A 4b user-defined descriptor associated with a translation table entry that can be annotated onto a transaction request.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARNSAID</spirit:logicalName>
      <spirit:description>Non-secure access identifier, can be checked to permit or deny access to a memory location.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARSUBSYSID</spirit:logicalName>
      <spirit:description>Subsystem identifier that indicates from which subsystem a request originates.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARMPAM</spirit:logicalName>
      <spirit:description>Memory System Resource Partitioning and Monitoring (MPAM) information for a request.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_request</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARCHUNKEN</spirit:logicalName>
      <spirit:description>If asserted in a read request, the Subordinate can send read data in 128b chunks.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
        <spirit:defaultValue>0</spirit:defaultValue>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:channelRef>Read_request</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARIDUNQ</spirit:logicalName>
      <spirit:description>If asserted high, the ID for this transfer is unique-in-flight.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
        <spirit:defaultValue>0</spirit:defaultValue>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:channelRef>Read_request</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARTAGOP</spirit:logicalName>
      <spirit:description>Indicates if MTE tags are requested with a read transaction.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARMECID</spirit:logicalName>
      <spirit:description>RME Memory Encryption Context identifier.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARVALIDCHK</spirit:logicalName>
      <spirit:description>Check signal for ARVALID.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_request</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>ARVALID</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARREADYCHK</spirit:logicalName>
      <spirit:description>Check signal for ARREADY.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_request</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>ARREADY</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARIDCHK</spirit:logicalName>
      <spirit:description>Check signal for ARID, ARIDUNQ.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_request</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>ARID</arm:checkPortReference>
          <arm:checkPortReference>ARIDUNQ</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARADDRCHK</spirit:logicalName>
      <spirit:description>Check signal for ARADDR.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_request</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>ARADDR</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARLENCHK</spirit:logicalName>
      <spirit:description>Check signal for ARLEN.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_request</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>ARLEN</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARCTLCHK0</spirit:logicalName>
      <spirit:description>Check signal for ARSIZE, ARBURST, ARLOCK, ARPROT, ARNSE.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_request</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>ARSIZE</arm:checkPortReference>
          <arm:checkPortReference>ARBURST</arm:checkPortReference>
          <arm:checkPortReference>ARLOCK</arm:checkPortReference>
          <arm:checkPortReference>ARPROT</arm:checkPortReference>
          <arm:checkPortReference>ARNSE</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARCTLCHK1</spirit:logicalName>
      <spirit:description>Check signal for ARREGION, ARCACHE, ARQOS.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_request</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>ARREGION</arm:checkPortReference>
          <arm:checkPortReference>ARCACHE</arm:checkPortReference>
          <arm:checkPortReference>ARQOS</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARCTLCHK2</spirit:logicalName>
      <spirit:description>Check signal for ARDOMAIN, ARSNOOP.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_request</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>ARDOMAIN</arm:checkPortReference>
          <arm:checkPortReference>ARSNOOP</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARCTLCHK3</spirit:logicalName>
      <spirit:description>Check signal for ARCHUNKEN, ARTAGOP.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_request</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>ARCHUNKEN</arm:checkPortReference>
          <arm:checkPortReference>ARTAGOP</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARUSERCHK</spirit:logicalName>
      <spirit:description>Check signal for ARUSER.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_request</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>ARUSER</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARTRACECHK</spirit:logicalName>
      <spirit:description>Check signal for ARTRACE.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_request</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>ARTRACE</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARLOOPCHK</spirit:logicalName>
      <spirit:description>Check signal for ARLOOP.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARMMUCHK</spirit:logicalName>
      <spirit:description>Check signal for ARMMUATST, ARMMUFLOW, ARMMUSECSID, ARMMUSSIDV, ARMMUVALID.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARMMUSIDCHK</spirit:logicalName>
      <spirit:description>Check signal for ARMMUSID.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_request</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>ARMMUSID</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARMMUSSIDCHK</spirit:logicalName>
      <spirit:description>Check signal for ARMMUSSID.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARNSAIDCHK</spirit:logicalName>
      <spirit:description>Check signal for ARNSAID.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARMPAMCHK</spirit:logicalName>
      <spirit:description>Check signal for ARMPAM.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_request</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>ARMPAM</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARPBHACHK</spirit:logicalName>
      <spirit:description>Check signal for ARPBHA.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARSUBSYSIDCHK</spirit:logicalName>
      <spirit:description>Check signal for ARSUBSYSID.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ARMECIDCHK</spirit:logicalName>
      <spirit:description>Check signal for ARMECID.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_request</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>ARMECID</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>RVALID</spirit:logicalName>
      <spirit:description>Asserted high to indicate that the signals on the R channel are valid.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_data</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>RREADY</spirit:logicalName>
      <spirit:description>Asserted high to indicate that a transfer on the R channel can be accepted.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_data</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>RID</spirit:logicalName>
      <spirit:description>Transaction identifier used for the ordering of read requests, responses, and data.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
        <spirit:defaultValue>0</spirit:defaultValue>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:channelRef>Read_data</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>RIDUNQ</spirit:logicalName>
      <spirit:description>If asserted high, the ID for this transfer is unique-in-flight.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
        <spirit:defaultValue>0</spirit:defaultValue>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:channelRef>Read_data</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>RDATA</spirit:logicalName>
      <spirit:description>The read data signal carries data between a Subordinate and Manager in a read transaction.</spirit:description>
      <spirit:wire>
        <spirit:qualifier>
          <spirit:isData>true</spirit:isData>
        </spirit:qualifier>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_data</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>RTAG</spirit:logicalName>
      <spirit:description>Memory tag associated with data. There is a 4-bit tag per 128-bits of data, with a minimum of 4-bits. Has the same validity rules as the associated data. It is recommended that invalid tags are driven to zero.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>RRESP</spirit:logicalName>
      <spirit:description>Response for transactions on the read channels. Must be valid when RVALID is asserted.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
        <spirit:defaultValue>0</spirit:defaultValue>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:channelRef>Read_data</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>RLAST</spirit:logicalName>
      <spirit:description>Indicates the last read data transfer of a transaction.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_data</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>RUSER</spirit:logicalName>
      <spirit:description>User-defined extension to read data and response.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
        <spirit:defaultValue>0</spirit:defaultValue>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:channelRef>Read_data</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>RPOISON</spirit:logicalName>
      <spirit:description>Asserted high to indicates that the data in this transfer is corrupted. There is one bit per 64-bits of data.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_data</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>RTRACE</spirit:logicalName>
      <spirit:description>Trace signal associated with the read data channel.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_data</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>RLOOP</spirit:logicalName>
      <spirit:description>A user-defined value that must be reflected from a read request to response and data transfers.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>RCHUNKV</spirit:logicalName>
      <spirit:description>Asserted high to indicate that RCHUNKNUM and RCHUNKSTRB are valid. It must be the same for every response of the transaction.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
        <spirit:defaultValue>0</spirit:defaultValue>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:channelRef>Read_data</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>RCHUNKNUM</spirit:logicalName>
      <spirit:description>Indicates the chunk number being transferred. Chunks are numbered incrementally from zero, according to the data width and base address of the transaction. </spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
        <spirit:defaultValue>0</spirit:defaultValue>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:channelRef>Read_data</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>RCHUNKSTRB</spirit:logicalName>
      <spirit:description>Indicates the read data chunks that are valid for this transfer.  Each bit corresponds to 128 bits of data. The least significant bit of RCHUNKSTRB corresponds to the least significant 128 bits of RDATA. </spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
        <spirit:defaultValue>0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</spirit:defaultValue>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:channelRef>Read_data</arm:channelRef>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>RBUSY</spirit:logicalName>
      <spirit:description>Indicates the current level of Subordinate activity in a transaction response. The value increases as the Subordinate becomes busier.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>RVALIDCHK</spirit:logicalName>
      <spirit:description>Check signal for RVALID.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_data</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>RVALID</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>RREADYCHK</spirit:logicalName>
      <spirit:description>Check signal for RREADY.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_data</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>RREADY</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>RIDCHK</spirit:logicalName>
      <spirit:description>Check signal for RID, RIDUNQ.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_data</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>RID</arm:checkPortReference>
          <arm:checkPortReference>RIDUNQ</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>RDATACHK</spirit:logicalName>
      <spirit:description>Check signal for RDATA.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_data</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>RDATA</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>RTAGCHK</spirit:logicalName>
      <spirit:description>Check signal for RTAG.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>RRESPCHK</spirit:logicalName>
      <spirit:description>Check signal for RRESP, RBUSY.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_data</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>RRESP</arm:checkPortReference>
          <arm:checkPortReference>RBUSY</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>RLASTCHK</spirit:logicalName>
      <spirit:description>Check signal for RLAST.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_data</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>RLAST</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>RCHUNKCHK</spirit:logicalName>
      <spirit:description>Check signal for RCHUNKV, RCHUNKNUM, RCHUNKSTRB.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_data</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>RCHUNKV</arm:checkPortReference>
          <arm:checkPortReference>RCHUNKNUM</arm:checkPortReference>
          <arm:checkPortReference>RCHUNKSTRB</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>RUSERCHK</spirit:logicalName>
      <spirit:description>Check signal for RUSER.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_data</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>RUSER</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>RPOISONCHK</spirit:logicalName>
      <spirit:description>Check signal for RPOISON.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_data</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>RPOISON</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>RTRACECHK</spirit:logicalName>
      <spirit:description>Check signal for RTRACE.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:channelRef>Read_data</arm:channelRef>
        <arm:checkPortReferences>
          <arm:checkPortReference>RTRACE</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>RLOOPCHK</spirit:logicalName>
      <spirit:description>Check signal for RLOOP.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ACVALID</spirit:logicalName>
      <spirit:description>Asserted high to indicate that the signals on the AC channel are valid.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ACREADY</spirit:logicalName>
      <spirit:description>Asserted high to indicate that a transfer on the AC channel can be accepted.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ACADDR</spirit:logicalName>
      <spirit:description>Used to carry the payload for DVM message requests.</spirit:description>
      <spirit:wire>
        <spirit:qualifier>
          <spirit:isAddress>true</spirit:isAddress>
        </spirit:qualifier>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ACVMIDEXT</spirit:logicalName>
      <spirit:description>Extension to support 16-bit VMID in DVM messages.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ACTRACE</spirit:logicalName>
      <spirit:description>Trace signal associated with the snoop request channel.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ACVALIDCHK</spirit:logicalName>
      <spirit:description>Check signal for ACVALID.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ACREADYCHK</spirit:logicalName>
      <spirit:description>Check signal for ACREADY.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ACADDRCHK</spirit:logicalName>
      <spirit:description>Check signal for ACADDR.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ACVMIDEXTCHK</spirit:logicalName>
      <spirit:description>Check signal for ACVMIDEXT.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ACTRACECHK</spirit:logicalName>
      <spirit:description>Check signal for ACTRACE.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>CRVALID</spirit:logicalName>
      <spirit:description>Asserted high to indicate that the signals on the CR channel are valid.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>CRREADY</spirit:logicalName>
      <spirit:description>Asserted high to indicate that a transfer on the CR channel can be accepted.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>CRTRACE</spirit:logicalName>
      <spirit:description>Trace signal associated with the snoop response channel.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>CRVALIDCHK</spirit:logicalName>
      <spirit:description>Check signal for CRVALID.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>CRREADYCHK</spirit:logicalName>
      <spirit:description>Check signal for CRREADY.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>CRTRACECHK</spirit:logicalName>
      <spirit:description>Check signal for CRTRACE.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>VAWQOSACCEPT</spirit:logicalName>
      <spirit:description>An output from a Subordinate that indicates the QoS value for which it accepts requests from the AW channel.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>VARQOSACCEPT</spirit:logicalName>
      <spirit:description>An output from a Subordinate that indicates the QoS value for which it accepts requests from the AR channel.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>VAWQOSACCEPTCHK</spirit:logicalName>
      <spirit:description>Check signal for VAWQOSACCEPT.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>VARQOSACCEPTCHK</spirit:logicalName>
      <spirit:description>Check signal for VARQOSACCEPT.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWAKEUP</spirit:logicalName>
      <spirit:description>Manager output, asserted HIGH to indicate there might be activity on the read and write request channels.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ACWAKEUP</spirit:logicalName>
      <spirit:description>Subordinate output, asserted HIGH to indicate there might be activity on the snoop request channel.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>AWAKEUPCHK</spirit:logicalName>
      <spirit:description>Check signal for AWAKEUP.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
      <spirit:vendorExtensions>
        <arm:defaultNotDefined>Unknown</arm:defaultNotDefined>
        <arm:checkPortReferences>
          <arm:checkPortReference>AWAKEUP</arm:checkPortReference>
        </arm:checkPortReferences>
      </spirit:vendorExtensions>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>ACWAKEUPCHK</spirit:logicalName>
      <spirit:description>Check signal for ACWAKEUP.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>SYSCOREQ</spirit:logicalName>
      <spirit:description>Output from a Manager, asserted HIGH to request that it receives DVM messages on the AC channel.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>SYSCOACK</spirit:logicalName>
      <spirit:description>Output from a Subordinate, asserted HIGH to acknowledge that the attached Manager might receive DVM messages on the AC channel.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>SYSCOREQCHK</spirit:logicalName>
      <spirit:description>Check signal for SYSCOREQ.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>SYSCOACKCHK</spirit:logicalName>
      <spirit:description>Check signal for SYSCOACK.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>BROADCASTATOMIC</spirit:logicalName>
      <spirit:description>Manager tie-off input, used to control the issuing of Atomic transactions from an interface.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>BROADCASTSHAREABLE</spirit:logicalName>
      <spirit:description>Manager tie-off input, used to control the issuing of Shareable transactions from an interface.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
        <spirit:defaultValue>1</spirit:defaultValue>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>BROADCASTCACHEMAINT</spirit:logicalName>
      <spirit:description>Manager tie-off input, used to control the issuing of CMOs from an interface.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>BROADCASTCMOPOPA</spirit:logicalName>
      <spirit:description>Manager tie-off input, used to control the issuing of a CleanInvalidPoPA CMO.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
    <spirit:port>
      <spirit:logicalName>BROADCASTPERSIST</spirit:logicalName>
      <spirit:description>Manager tie-off input, used to control the issuing of CleanSharedPersist and CleanSharedDeepPersist CMOs.</spirit:description>
      <spirit:wire>
        <spirit:onMaster>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>illegal</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>
  </spirit:ports>
  <spirit:description>An ACE5-LiteACP interface is a simplified variant of AXI5 intended for use as a CPU accelerator coherency port. Reference: AMBA AXI Protocol Specification ARM IHI 0022 http://www.arm.com/support/AMBA.html</spirit:description>
  <spirit:vendorExtensions>
    <arm:revision>3</arm:revision>
    <arm:supportedSpecifications>
      <arm:supportedSpecification>IHI0022J</arm:supportedSpecification>
      <arm:supportedSpecification>IHI0022K</arm:supportedSpecification>
    </arm:supportedSpecifications>
    <arm:channels>
      <arm:channel>
        <arm:name>Write_request</arm:name>
        <arm:label>AW</arm:label>
        <arm:description>The write request channel carries all the required address and control information for transactions that use the write channels.</arm:description>
      </arm:channel>
      <arm:channel>
        <arm:name>Write_data</arm:name>
        <arm:label>W</arm:label>
        <arm:description>The write data channel carries write data and control information from a Manager to a Subordinate.</arm:description>
      </arm:channel>
      <arm:channel>
        <arm:name>Write_response</arm:name>
        <arm:label>B</arm:label>
        <arm:description>The write response channel carries responses from Subordinate to Manager for transactions using the write data channels.</arm:description>
      </arm:channel>
      <arm:channel>
        <arm:name>Read_request</arm:name>
        <arm:label>AR</arm:label>
        <arm:description>The read request channel carries all the required address and control information for transactions that use the read channels.</arm:description>
      </arm:channel>
      <arm:channel>
        <arm:name>Read_data</arm:name>
        <arm:label>R</arm:label>
        <arm:description>The read data channel carries read data and responses from a Subordinate to a Manager.</arm:description>
      </arm:channel>
    </arm:channels>
  </spirit:vendorExtensions>
</spirit:abstractionDefinition>
